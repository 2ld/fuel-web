#!/usr/bin/env ruby

require 'naily/server'
require 'naily/config'
require 'naily/version'

require 'ostruct'
require 'optparse'

options = OpenStruct.new
options.show_version = false
options.daemonize = false
options.config_path = nil
options.log_path = nil
options.log_level = :error

OptionParser.new do |opts|
  opts.banner = 'Usage: nailyd [options]'

  opts.separator ''
  opts.separator 'Options:'

  opts.on('-v', '--version', 'Show version')               { |flag| options.show_version = true }
  opts.on('-d', '--[no-]deamonize', 'Daemonize server')    { |flag| options.daemonize = flag }
  opts.on('-c', '--config PATH', 'Use custom config file') do |path|
    unless File.exists?(path)
      puts "Error: config file #{options.config_path} was not found"
      exit
    end

    options.config_path = path
  end

  opts.on('-l', '--logfile PATH' 'Log file path')          { |path| options.log_path = path }
  opts.on('--loglevel LEVEL', [:fatal, :error, :warn, :info, :debug], 'Logging level (fatal, error, warn, info, debug)') { |level| option.log_level = level }

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end

  opts.on_tail('-v', '--version', 'Show version') do
    puts Naily::VERSION
    exit
  end
end.parse!

config_path = options.config_path || '/etc/naily/nailyd.conf'

config = Naily::Config.default
config.update(Naily::Config.load(config_path)) if File.exists?(config_path)

if options.daemonize
  # After daemonize we can't log to STDOUT, pick a default log file
  options.log_path ||= "#{Dir.pwd}/naily.log"

  require 'daemons'
  Daemons.daemonize
end

logger = options.log_path ? Logger.new(options.log_path) : Logger.new(STDOUT)
logger.level = Logger.const_get(options.log_level.upcase)

server = Naily::Server.new(config)
server.logger = logger

server.run

